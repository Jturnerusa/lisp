(def (take (fn (list 'a) int -> (list 'a)))
    (lambda (list n)
      (if (nil? list)
          nil
          (letrec ((loop (lambda (list counter)
                           (if (> counter (- n 1))
                               nil
                               (cons (car list) (loop (cdr list) (+ counter 1)))))))
            (loop list 0)))))

(def (drop (fn (list 'a) int -> (list 'a)))
    (lambda (list n)
      (if (nil? list)
          nil
          (letrec ((loop (lambda (list counter)
                           (if (= counter n)
                               (cdr list)
                               (loop (cdr list) (+ counter 1))))))
            (loop list 0)))))

(def (merge (fn (fn 'a 'a -> bool)
                (list 'a)
                (list 'a)
                -> (list 'a)))
    (lambda (pred l r)
      (cond ((nil? l)
             r)
            ((nil? r)
            l)
            ((pred (car l) (car r))
             (cons (car l) (merge pred (cdr l) r)))
            (true
             (cons (car r) (merge pred l (cdr r)))))))

(def (sort (fn (list 'a)
               (fn 'a 'a -> bool)
               -> (list 'a)))
    (lambda (list pred)
      (cond ((nil? list)
             nil)
             ((< (length list) 2)
              list)
             (true
              (let* ((mid (/ (length list) 2))
                     (l (take list mid))
                     (r (drop list mid)))
                (merge pred (sort l pred) (sort r pred)))))))
